# Generate the event modifiers and the decision-tree event for the Claw Machine

# Ideally, these rewards should all be exciting and somewhat OP, if perhaps
# demanding on your playstyle (eg getting a Build Time bonus will mean you
# benefit by spamming buildings). They should be very VERY roughly balanced
# against each other. It's fine to have different numbers of rewards in the
# categories, but no reward should feel truly disappointing, and no category
# should feel unexciting or overly predictable.

# Map something to None if its corresponding modifier has been manually
# created in 00_clawmachine.txt, or to a number to automatically create the
# modifier in 01_clawmachine_effects.txt. To create a province modifier, set
# to a list containing the value instead, eg [10], and the effect will be
# applied to the country's capital.

EVENT_TEMPLATE = """# Autogenerated by build.py - do not edit
namespace = clawmachine

country_event = {
	id = clawmachine.1
	title = clawmachine.1.t
	desc = clawmachine.1.d
	picture = event_test
	is_triggered_only = yes
	immediate = {
		# Metaprogramming in EU4 is extremely limited. We can't set a string variable and then
		# say "add country modifier with this name", so we have a bunch of individual flags,
		# and have a corresponding switch block in the selection. The important thing is: the
		# randomness occurs here in the immediate block, allowing the player to make a decision
		# and be guaranteed to get the exact effect listed.
		hidden_effect = {%>%
			random_list = { # %sec%
%^%				1 = { set_country_flag = clawmachine_%opt% }
			}%<%
		}
	}%>%
	option = {
		name = clawmachine.1.%sec%
		trigger_switch = {
			on_trigger = has_country_flag
%^%			clawmachine_%opt% = { add_country_modifier = { name = clawmachine_%opt% duration = -1 } } #?
%^%			clawmachine_%opt% = { capital_scope = { add_permanent_province_modifier = { name = clawmachine_%opt% duration = -1 } } } #!
		}
	}%<%
	option = {
		name = clawmachine.1.abort
		add_prestige = -10
		hidden_effect = {
			country_event = {
				id = clawmachine.2
				days = 30
			}
		}
		custom_tooltip = "clawmachine.1.abortdesc"
		ai_chance = { factor = 100 }
	}
	after = {%>%
%^%		clr_country_flag = clawmachine_%opt%
%<%	}
}

# Delayed event to reenable the decision. This discourages frivolous rerolling, while still
# permitting it if none of the options suit the country in question.
country_event = {
	id = clawmachine.2
	title = clawmachine.1.t # Irrelevant since it's hidden
	desc = clawmachine.1.d
	picture = event_test
	is_triggered_only = yes
	hidden = yes
	immediate = {
		hidden_effect = {
			clr_country_flag = claw_machine_used
		}
	}
	option = { name = clawmachine.1.abort }
}
"""

rewards = {
	"sword": { # Military bonuses
# ae_impact
# siege_blockade_progress
		"fort_maintenance_modifier": -1,
# recover_army_morale_speed
# movement_speed
# global_regiment_recruit_speed
# global_ship_recruit_speed
# defensiveness
	},
	"coin": { # Financial bonuses
# merchants
		"placed_merchant_power": 500,
# ship_power_propagation
# caravan_power
# center_of_trade_upgrade_cost
# great_project_upgrade_cost
# inflation_action_cost
# build_time + allowed_num_of_buildings
# global_prosperity_growth
# MODIFIER_PROVINCE_OWNER_TRADE_CHANCE ???
# MODIFIER_GLOBAL_COT_GRAVITY ???
	},
	"heart": { # Cultural bonuses and internal affairs
# min_autonomy_in_territories
		"tolerance": None,
# administrative_efficiency
# possible_policy
# governing_cost
# monthly_reform_progress
# culture_conversion_cost
# num_accepted_cultures
# MODIFIER_NO_STABILITY_LOSS_ON_MONARCH_DEATH
		# "all_estate_loyalty_equilibrium": 1,
	},
	"globe": { # Discovery and diplomacy
# improve_relation_modifier
# prestige_decay
# envoy_travel_time
# range = 1.0 (colonial range - this should be a 100% bonus) + colonist_time (reduce massively)
# native_assimilation
# innovativeness_gain
		"institution_growth": [120],
	},
}

import sys, os
root = os.path.dirname(sys.argv[0])
# Note that only the English localisation will be autogenerated. If this mod ever gets
# other translations done, they'll need to be thought about separately.
with open(root + "/common/event_modifiers/01_clawmachine_effects.txt", "w") as eff, open(root + "/localisation/clawmachine_effects_l_english.yml", "w") as loc:
	print("# Autogenerated from build.py - do not edit", file=eff)
	print("\ufeffl_english:", file=loc)
	for sec, opts in rewards.items():
		for id, val in opts.items():
			print(' clawmachine_%s:0 "Cosmic Claw Machine"' % id, file=loc)
			# TODO: Generate event option randomization too
			if isinstance(val, list):
				# Create a capital_scope effect
				val = val[0]
			# else: # Normally just add_country_modifier
			if val is None: continue
			print("clawmachine_%s = {" % id, file=eff)
			print("\t%s = %s" % (id, val), file=eff)
			print("}", file=eff)

# The event template has some markers in it.
# "%>% ... %<%": This block is repeated once for each section. Use %sec% for the section keyword.
# "%^% ... \n": This line is repeated once for each option. Use %opt% for the effect ID.

with open(root + "/events/clawmachine.txt", "w") as evfile:
	evt = EVENT_TEMPLATE
	while evt:
		before, part, after = evt.partition("%>%")
		evfile.write(before)
		if part:
			section, part, after = after.partition("%<%")
			if not part:
				print("ERROR IN TEMPLATE: Mismatched markers")
				break # File will be incomplete at the point of the broken marker
			for sec, opts in rewards.items():
				text = section.replace("%sec%", sec)
				while text:
					b, _, a = text.partition("%^%")
					evfile.write(b)
					o, p, a = a.partition("\n")
					if p:
						for id, val in opts.items():
							# Filtered 
							if o.endswith("#?") and isinstance(val, list): continue
							if o.endswith("#!") and not isinstance(val, list): continue
							evfile.write(o.replace("%opt%", id) + p)
					text = a
		evt = after
